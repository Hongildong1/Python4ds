# Series 

> from pandas import Series, DataFrame
> import pandas as pd
> import numpy as np

> obj = Series([4,7,-5,3])
> print(obj.index)
> print(obj.values)
[ 4  7 -5  3]

> obj = Series([4,7,-5,3],index= ['a','b','c','d'])
> print(obj.index)
Index(['a', 'b', 'c', 'd'], dtype='object')

> print(obj['a'])
4

> obj['a'] = 8
> print(obj['a'])
8

> print(obj[obj>0])
a    4
b    7
d    3
dtype: int64

> print(obj*2)
a     8
b    14
c   -10
d     6
dtype: int64

> sdata = {'Ohio':35000, 'Texas':71000,'Oregon':16000,'Utah':5000}
# 딕셔너리 생성

> obj3 = Series(sdata)
# Series를 통해 Series 객체 생성

> print(obj3)
Ohio      35000
Oregon    16000
Texas     71000
Utah       5000
dtype: int64

> states = ['California','Ohio','Oregon','Texas']
# index 수정
> obj4 = Series(sdata,index=states)
> print(obj4)
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
dtype: float64

> print(pd.isnull(obj4))
# null이 존재하는지에 대해 확인 is.na와 같음
California     True
Ohio          False
Oregon        False
Texas         False
dtype: bool

> obj4.name = 'population'
# obj4에 대한 이름을 짓는 것
> obj4.index.name = 'state'
# obj4의 index에 대한 이름을 짓는 것

> print(obj4)
state
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
Name: population, dtype: float64

# DataFrame 
# 가장 흔하게 사용되는 방법은 같은 길이의 리스트에 담긴 사전을 이용하거나 Numpy 배열을 이용하는 방법

> data = {'state':['Ohio','Ohio','Ohio','Nevada','Nevada'],'year':[2000,2001,2002,2001,2002],'pop':[1.5,1.7,3.6,2.4,2.9]}
> frame = DataFrame(data)
> print(frame)
   pop   state  year
0  1.5    Ohio  2000
1  1.7    Ohio  2001
2  3.6    Ohio  2002
3  2.4  Nevada  2001
4  2.9  Nevada  2002

> frame=DataFrame(data,columns=['year','state','pop'])
# year, state, pop 순서로 데이터 프레임을 구성한다.
> print(frame)
   year   state  pop
0  2000    Ohio  1.5
1  2001    Ohio  1.7
2  2002    Ohio  3.6
3  2001  Nevada  2.4
4  2002  Nevada  2.9

> frame=DataFrame(data,columns=['year','state','pop','debt'],index = ['one','two','three','four','five'])
# debt는 데이터가 없기 때문에 NA로 나타내며 index를 통해서 데이터의 index를 설정한다. 
> print(frame)
       year   state  pop debt
one    2000    Ohio  1.5  NaN
two    2001    Ohio  1.7  NaN
three  2002    Ohio  3.6  NaN
four   2001  Nevada  2.4  NaN
five   2002  Nevada  2.9  NaN

> print(frame.year)
# 데이터의 열을 접근 할 때에는 .을 통해서 데이터를 접근 할 수 있다.
one      2000
two      2001
three    2002
four     2001
five     2002
Name: year, dtype: int64

> print(frame.ix['three'])
# 데이터의 행을 접근할 때에는 ix를 통해 접근 할 수 있다.
year     2002
state    Ohio
pop       3.6
debt      NaN
Name: three, dtype: object

> frame['debt'] = 16.5
# debt 열에 16.5를 대입한다. 
> print(frame)
       year   state  pop  debt
one    2000    Ohio  1.5  16.5
two    2001    Ohio  1.7  16.5
three  2002    Ohio  3.6  16.5
four   2001  Nevada  2.4  16.5
five   2002  Nevada  2.9  16.5

> frame['debt'] = np.arange(5.)
> print(frame)
       year   state  pop  debt
one    2000    Ohio  1.5   0.0
two    2001    Ohio  1.7   1.0
three  2002    Ohio  3.6   2.0
four   2001  Nevada  2.4   3.0
five   2002  Nevada  2.9   4.0

> val = Series([-1.2,-1.5,-1.7],index=['two','four','five'])
# 각 index에 값들을 대입한다.
> frame['debt'] =val
# 그리고 val의 값을 debt 열에 대입한다. 
> print(frame)
       year   state  pop  debt
one    2000    Ohio  1.5   NaN
two    2001    Ohio  1.7  -1.2
three  2002    Ohio  3.6   NaN
four   2001  Nevada  2.4  -1.5
five   2002  Nevada  2.9  -1.7

> del frame['year']
# year 열 삭제 
> print(frame)
        state  pop debt
one      Ohio  1.5  NaN
two      Ohio  1.7  NaN
three    Ohio  3.6  NaN
four   Nevada  2.4  NaN
five   Nevada  2.9  NaN

> print(frame.T)
# 전치
        one   two three    four    five
year   2000  2001  2002    2001    2002
state  Ohio  Ohio  Ohio  Nevada  Nevada
pop     1.5   1.7   3.6     2.4     2.9
debt    NaN   NaN   NaN     NaN     NaN

> print(frame.values)
# 각 행에 대한 데이터를 반환
[[2000 'Ohio' 1.5 nan]
 [2001 'Ohio' 1.7 nan]
 [2002 'Ohio' 3.6 nan]
 [2001 'Nevada' 2.4 nan]
 [2002 'Nevada' 2.9 nan]]

> obj = Series(np.arange(5.),index=['a','b','c','d','e'])
> new_obj=obj.drop('c')
# 행 삭제 
> print(new_obj)
a    0.0
b    1.0
d    3.0
e    4.0
dtype: float64

> data = DataFrame(np.arange(16).reshape((4,4)),index= ['Ohio','Colorado','Utah','New York'],columns=['one','two','three','four'])
> data.drop(['Colorado','Ohio'])
# 열 삭제
> print(data)
          one  two  three  four
Utah        8    9     10    11
New York   12   13     14    15

# 행 추출 

> obj = Series(np.arange(4),index=['a','b','c','d'])
> print(obj['b'])
# index로 추출한다.
> print(obj[1])
# 1위치에 있는 것을 추출한다. 

> print(obj[[1,3]])
b    1
d    3
dtype: int32
# 1,3 위치를 추출

> print(obj[obj<2])
a    0
b    1
dtype: int32
# 2보다 작은 것을 추출

> print(obj['b':'c'])
b    1
c    2
dtype: int32

# 열 추출
> data =DataFrame(np.arange(16).reshape((4,4)),index=['Ohio','Colorado','Utah','New York'],columns=['one','two','three','four'])
> print(data['two'])
# two 열만 추출
Ohio         1
Colorado     5
Utah         9
New York    13
Name: two, dtype: int32

> print(data[['three','one']])
# three, one 열 추출
          three  one
Ohio          2    0
Colorado      6    4
Utah         10    8
New York     14   12

***이런식으로 하는게 가장 편하다 ***
> print(data.ix[['Colorado','Ohio'],[1,2]])
          two  three
Colorado    5      6
Ohio        1      2

> print(data.ix[data.three >5,:3])
          one  two  three
Colorado    4    5      6
Utah        8    9     10
New York   12   13     14

***rbind,cbind ***
# rbind
> df_1
    A   B   C   D
0  A0  B0  C0  D0
1  A1  B1  C1  D1
2  A2  B2  C2  D2

> df_2
   A   B   C   D
3  A3  B3  C3  D3
4  A4  B4  C4  D4
5  A5  B5  C5  D5

> df_12_axis0 = pd.concat([df_1, df_2])
    A   B   C   D
0  A0  B0  C0  D0
1  A1  B1  C1  D1
2  A2  B2  C2  D2
3  A3  B3  C3  D3
4  A4  B4  C4  D4
5  A5  B5  C5  D5

# cbind
> df_3
E   F   G   H
0  A6  B6  C6  D6
1  A7  B7  C7  D7
2  A8  B8  C8  D8

> df_13_axis1 = pd.concat([df_1, df_3], axis=1) # column bind
     A   B   C   D    E    F    G   H
0  A0  B0  C0  D0  A6  B6  C6  D6
1  A1  B1  C1  D1  A7  B7  C7  D7
2  A2  B2  C2  D2  A8  B8  C8  D8

*** apply *** 
> frame = DataFrame(np.random.randn(4,3),columns=list('bde'),index=['Utah','Ohio','Texas','Oregon'])
> f = lambda x : x.max()-x.min()
> print(frame.apply(f))
b    2.116012
d    3.756212
e    0.738179
dtype: float64

*** sort ***
> obj = Series(range(4), index=['d','a','b','c'])
> print(obj.sort_index())
a    1
b    2
c    3
d    0
dtype: int32

> obj = Series([4,7,-3,2])
> print(obj.sort_values())
2   -3
3    2
0    4
1    7
dtype: int64

> frame = DataFrame({'b':[4,7,-3,2],'a':[0,1,0,1]})
> print(frame.sort_values(by=['a','b']))
   a  b
2  0 -3
0  0  4
3  1  2
1  1  7

*** sum ***
> df = DataFrame([[1.4,np.nan],[7.1,-4.5],[np.nan,np.nan],[0.75,-1.3]],index=['a','b','c','d'],columns=['one','two'])
> print(df.sum())
one    9.25
two   -5.80
dtype: float64
# 열 sum
> print(df.sum(axis=1))
a    1.40
b    2.60
c    0.00
d   -0.55
dtype: float64
# 행 sum

*** mean ***
> print(df.mean(axis=1))
a    1.400
b    1.300
c      NaN
d   -0.275
dtype: float64
# 로우 평균 axis =1

> print(df.mean(axis=0,skipna=True))
# 행렬 평균
one    3.083333
two   -2.900000
dtype: float64

*** summary ***
> print(df.describe())
            one       two
count  3.000000  2.000000
mean   3.083333 -2.900000
std    3.493685  2.262742
min    0.750000 -4.500000
25%    1.075000 -3.700000
50%    1.400000 -2.900000
75%    4.250000 -2.100000
max    7.100000 -1.300000

***상관관계***
> return.cov()

*** uniq***
> obj = Series(['c','a','b','a','d','b','c','e'])
> print(obj.unique())
['c' 'a' 'b' 'd' 'e']

*** count ***
> print(obj.value_counts())
c    2
b    2
a    2
d    1
e    1
dtype: int64

*** isnull ***
> String_data = Series(['a','b',np.nan])
> print(String_data.isnull())
0    False
1    False
2     True
dtype: bool

*** dropnull ***
> print(String_data.dropna())
0    a
1    b
dtype: object

*** null이 아닌 것만 뽑아냄 ***
> print(String_data[String_data.notnull()])
0    a
1    b
dtype: object

*** null 을 평균으로 대신함 ***
> data = Series([1,np.nan,3.5,np.nan,7])
> print(data.fillna(data.mean()))
0    1.000000
1    3.833333
2    3.500000
3    3.833333
4    7.000000
dtype: float64



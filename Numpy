> import numpy as np

> data = np.random.randn(2,3)
> print(data.shape)
(2, 3)

> print(data.dtype)
float64

* 배열을 생성하는 가장 쉬운 방법은 array 함수를 이용하는 것이다. 
> data1=[6,7.5,8,0,1]
> arr1 = np.array(data1)
> print(arr1)
[6.  7.5 8.  0.  1. ]

* 2차원 배열
> data2=[[1,2,3,4],[5,6,7,8]]
> arr2 = np.array(data2)
> print(arr2)
[[1 2 3 4]
 [5 6 7 8]]
 
 * 0행렬
> print(np.zeros((3,6)))
[[0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
 
 *arange는 파이썬의 range 함수의 배열 버전이다.
> print(np.arange(15))
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]

* type 변환 
> arr = np.array([1,2,3,4,5])
> print(arr.dtype)
int32
> float_arr = arr.astype(np.float64)
> print(float_arr.dtype)
# np.int32 / np.string_ 

# 2*2*3의 크기 
arr3d = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
print(arr3d[0])
[[1 2 3]
 [4 5 6]]
 
old_values = arr3d[0].copy()
# 벡터에 대한 복사를 할때 copy()를 사용

* 다차원 배열 생성 (reshape 사용)
> arr = np.arange(32).reshape((8,4))
> print(arr)
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]
 [16 17 18 19]
 [20 21 22 23]
 [24 25 26 27]
 [28 29 30 31]]
 
> print(arr.T)
# 전치
[[ 0  4  8 12 16 20 24 28]
 [ 1  5  9 13 17 21 25 29]
 [ 2  6 10 14 18 22 26 30]
 [ 3  7 11 15 19 23 27 31]]
 
 * 통계적 수치에 관련된 부분
 * sqrt : 제곱근
> arr = np.arange(10)
> print(np.sqrt(arr))
[0.         1.         1.41421356 1.73205081 2.         2.23606798
 2.44948974 2.64575131 2.82842712 3.        ]
 
 > print(np.exp(arr))
 # exp : 지수
 [1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01
 5.45981500e+01 1.48413159e+02 4.03428793e+02 1.09663316e+03
 
 
 np.add : 덧셈
 np.subtract : 뺄셈
 np.multiply : 곱셈
 np.divide , np.floor_divide
 np.fmax : 두 원소 중 큰 값을 반환  
 np.fmin : 두 원소 중 작은 값을 반환
 
> arr = np.arange(10)
> print(np.where(arr >4,2,arr))
[0 1 2 3 4 2 2 2 2 2]
 # 4보다 작으면 arr, 4보다 크면 2
 
> arr = np.arange(10)
> print(np.mean(arr))
4.5

> print(arr.sum(0))
45

> (arr >0 ).sum()
44
# 조건을 주면서 sum()을 구함

> arr.sort()
# 정렬

> names =np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
> print(np.unique(names))
['Bob' 'Joe' 'Will']
# unique 사용

# intersect1d(x,y) : x와 y에 공통적으로 존재하는 원소를 정렬하여 반환한다. 
# union1d(x,y) : 두 배열의 합집합을 반환한다. 
# setdiff1d(x,y) : x와 y의 차집합을 반환한다.

* random 생성
# np.random.normal(size=(4,4) : 표준 정규 분포로부터 4*4

> np.random.randint(10, size=10)
array([0, 4, 3, 6, 9, 8, 0, 8, 5, 9])

> np.random.randint(10, 20, size=10)
array([10, 19, 16, 15, 13, 11, 18, 10, 14, 19])

> np.random.randint(10, 20, size=(3,5))
array([[16, 15, 17, 18, 18],
       [19, 12, 18, 16, 16],
       [19, 11, 16, 18, 18]])
